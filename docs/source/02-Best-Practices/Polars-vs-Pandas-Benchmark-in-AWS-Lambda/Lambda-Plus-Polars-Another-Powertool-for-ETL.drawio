<mxfile host="Electron" modified="2023-08-17T20:44:55.081Z" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/21.2.8 Chrome/112.0.5615.165 Electron/24.2.0 Safari/537.36" etag="gtbaK-Er0NUKeouKQsaf" version="21.2.8" type="device">
  <diagram name="Page-1" id="-BKfB8V29GjrkI_bZ6R8">
    <mxGraphModel dx="1241" dy="764" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="cn8Arj69BLHbhDp-Kydi-1" value="&lt;h1&gt;Polars vs Pandas&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;polars is a &lt;b&gt;lightening-fast&lt;/b&gt; DataFrame library&lt;/li&gt;&lt;li&gt;&lt;b&gt;2 ~ 5X faster&lt;/b&gt; than pandas when &lt;b&gt;reading&lt;/b&gt; columnar data format (&lt;b&gt;parquet&lt;/b&gt;) (native multi CPU core support)&lt;/li&gt;&lt;li&gt;&lt;b&gt;8 ~ 10X faster&lt;/b&gt; than pandas when &lt;b&gt;reading&lt;/b&gt; row oriented data format (&lt;b&gt;csv, JSON&lt;/b&gt;)&lt;/li&gt;&lt;li&gt;memory consumption of polars DataFrame ~= raw data size, pandas usually consume 2X raw data size (optimized in-memory data model for different data type)&lt;/li&gt;&lt;li&gt;&lt;b&gt;4 ~ 8X faster&lt;/b&gt; than pandas &lt;b&gt;in column oriented transformation&lt;/b&gt; (vectorization and multi-CPU out-of-the-box)&lt;/li&gt;&lt;li&gt;&lt;b&gt;Use 4 ~ 10 times less memory&lt;/b&gt; than pandas &lt;b&gt;for transformation&lt;/b&gt; (lazy load and zero copy technique)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;strokeColor=default;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="40" y="240" width="760" height="200" as="geometry" />
        </mxCell>
        <mxCell id="cn8Arj69BLHbhDp-Kydi-2" value="&lt;h1&gt;AWS Glue&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;run ETL job without provisioning infrastructure.&lt;/li&gt;&lt;li&gt;good for big data ETL job.&lt;/li&gt;&lt;li&gt;development experience is not good (&lt;b&gt;release slower&lt;/b&gt;).&lt;/li&gt;&lt;li&gt;not interactive, usually need to wait 2-5 minutes to run one line of code.&lt;/li&gt;&lt;li&gt;interactive Jupyter Notebook requires additional setup and it is expansive (not affordable for individual).&lt;/li&gt;&lt;li&gt;interactive Jupyter Notebook and Glue Job runtime is not the same, your notebook code may not work in production.&lt;/li&gt;&lt;li&gt;hard to control code quality, difficult to do unit test, almost impossible to do integration test.&lt;/li&gt;&lt;li&gt;&lt;b&gt;no native version control&lt;/b&gt;, immutable deployment, &lt;b&gt;blue/green deployment&lt;/b&gt;, canary deployment, version rollback.&lt;/li&gt;&lt;li&gt;difficult learning curve, hard to hire.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;strokeColor=default;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="40" y="480" width="760" height="230" as="geometry" />
        </mxCell>
        <mxCell id="cn8Arj69BLHbhDp-Kydi-3" value="&lt;h1&gt;AWS Lambda&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;run code without provisioning infrastructure.&lt;/li&gt;&lt;li&gt;has 10GB memory and 15 minutes hard limit.&lt;/li&gt;&lt;li&gt;awesome development experience (&lt;b&gt;can iterate fast&lt;/b&gt;).&lt;/li&gt;&lt;li&gt;easy to test, mature unit test, integration test strategy.&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;b&gt;out-of-the-box version control&lt;/b&gt;, immutable deployment, &lt;b&gt;blue/green deployment&lt;/b&gt;, canary deployment, version rollback.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;chill learning curve, easy to train and hire.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;strokeColor=default;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="40" y="760" width="760" height="200" as="geometry" />
        </mxCell>
        <mxCell id="cn8Arj69BLHbhDp-Kydi-5" value="&lt;h1&gt;Experiment Result&lt;/h1&gt;&lt;div style=&quot;background-color: rgb(39, 40, 34); color: rgb(248, 248, 242); font-size: 9.8pt; font-family: &amp;quot;JetBrains Mono&amp;quot;, monospace;&quot;&gt;&lt;pre style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;| n_files |   n_rows   | raw_size (MB) | polars_time (sec) | pandas_time (sec) | polars_mem (MB) | pandas_mem (MB) |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+=========+============+===============+===================+===================+=================+=================+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|    1    |   100,000  |       85      |        0.8        |        1.3        |       325       |       600       |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|    10   |  1,000,000 |      850      |         8         |         13        |      1,200      |      1,900      |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|    20   |  2,000,000 |     1,700     |         16        |         25        |      2,200      |      3,450      |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|    30   |  3,000,000 |     2,550     |         23        |         40        |      3,050      |      4,900      |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|    40   |  4,000,000 |     3,400     |         32        |         51        |      4,000      |      6,400      |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|    50   |  5,000,000 |     4,250     |         42        |         63        |      5,000      |      7,900      |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|    60   |  6,000,000 |     5,100     |         53        |         85        |      5,950      |      9,400      |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|    70   |  7,000,000 |     5,950     |        ...        |        OOM        |       ...       |       OOM       |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|    80   |  8,000,000 |     6,800     |        ...        |        OOM        |       ...       |       OOM       |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|    90   |  9,000,000 |     7,650     |        ...        |        OOM        |       ...       |       OOM       |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;|   100   | 10,000,000 |     8,500     |        110        |        OOM        |      9,500      |       OOM       |&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 9.8pt;&quot;&gt;+---------+------------+---------------+-------------------+-------------------+-----------------+-----------------+&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;" style="text;html=1;strokeColor=default;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="40" y="1560" width="920" height="480" as="geometry" />
        </mxCell>
        <mxCell id="cn8Arj69BLHbhDp-Kydi-6" value="&lt;h1&gt;Experiment Design&lt;/h1&gt;&lt;p&gt;Data Schema:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Has 25 columns.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;5 columns&#39; data type is int64, values are between 1 and 100000, example: 397647.&lt;/li&gt;&lt;li&gt;5 columns&#39; data type is float, values are between 0, 1, example: 0.44934012731611805.&lt;/li&gt;&lt;li&gt;5 columns&#39; data type is short string, values are uuid string, example: &quot;daa03354-c777-4b4a-b649-30998f7bd9e3&quot;.&lt;/li&gt;&lt;li&gt;5 columns&#39; data type is long string, values are lorem ipsum text has 3 ~ 6 sentences, example: &quot;Picture wait add environment PM weight music. Type tax chair friend. Data might read value three involve.&quot;.&lt;/li&gt;&lt;li&gt;5 columns&#39; data type is timestamp, values are from random datetime in microseconds from 2000-01-01 to 2023-01-01, example: 2008-11-08T14:37:77.638096Z.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Data Files:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;We create 100 files.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;Each file has 100,000 rows.&lt;/li&gt;&lt;li&gt;Data file format is parquet with snappy compression.&lt;/li&gt;&lt;li&gt;Each file is about 60MB with snappy compressed. 85MB if uncompressed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Lambda Function:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Python3.9&lt;/li&gt;&lt;li&gt;Memory: 10238 MB (cap is 10GB)&lt;/li&gt;&lt;li&gt;Architecture: x84_64&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Python Libraries (release time near 2023-01-01):&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;polars == 1.7.15&lt;/span&gt;&lt;/li&gt;&lt;li&gt;pandas == 1.5.3, pyarrow == 9.0.0&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;We try to read as many file as we could. If we can fit 10M rows in memory, usually we can handle 1M (1/10) rows&#39; dataset. It is because we may have to create copy of the data during data transformation.&lt;br&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;strokeColor=default;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="40" y="1000" width="760" height="520" as="geometry" />
        </mxCell>
        <mxCell id="cn8Arj69BLHbhDp-Kydi-9" value="&lt;h1&gt;Conclusion&lt;/h1&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;polars memory consumption is similar to the raw data size.&lt;/li&gt;&lt;li&gt;pandas memory consumption is 2X to the raw data size.&lt;/li&gt;&lt;li&gt;polars can handle 1M rows data (potentially even more).&lt;/li&gt;&lt;li&gt;pandas can handle 650k rows data (maybe less).&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;strokeColor=default;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="40" y="2080" width="760" height="160" as="geometry" />
        </mxCell>
        <mxCell id="cn8Arj69BLHbhDp-Kydi-10" value="&lt;h1&gt;Goal&lt;/h1&gt;&lt;div&gt;I would like to explore the possibility to use AWS Lambda + polars Python library to perform medium size dataset ETL job.&lt;br&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;strokeColor=default;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="40" y="40" width="760" height="160" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
